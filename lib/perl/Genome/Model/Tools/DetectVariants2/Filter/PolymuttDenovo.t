#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above 'Genome';

use Genome::Test::Factory::SoftwareResult::User;
use Test::More;

if (Genome::Sys->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}
else {
    plan tests => 7;
}

use_ok('Genome::Model::Tools::DetectVariants2::Filter::PolymuttDenovo');

# TODO This test should define alignment results rather than relying on existing ones
my @test_alignment_result_ids = qw(116541600 116542878 116545029);
my @test_alignment_results = Genome::InstrumentData::AlignmentResult::Merged->get(\@test_alignment_result_ids);
is(scalar(@test_alignment_results), 3, "Got 3 test alignment results");

my $test_data_dir = Genome::Config::get('test_inputs') . '/Genome-Model-Tools-DetectVariants2-Filter-PolymuttDenovo';
my $expected_dir = join('/', $test_data_dir, 'expected.v1');

my $detector_directory = join('/', $test_data_dir, 'polymutt-0.02');
my $detector_vcf_directory = join('/', $test_data_dir, 'detector_vcf_result');
my $input_directory = join('/', $test_data_dir, "input");

my $expected_vcf_file = join('/', $expected_dir, 'snvs.vcf.gz');
ok(-s $expected_vcf_file, "expected vcf file output $expected_vcf_file exists");

my $output_base = File::Temp::tempdir('DetectVariants2-Filter-PolymuttDenovoXXXXX', CLEANUP => 1, TMPDIR => 1);
my $output_dir = $output_base . '/filter';
my $output_vcf = join('/', $output_dir, 'snvs.vcf.gz');

my $vcf_version = Genome::Model::Tools::Vcf->get_vcf_version;

my $reference = Genome::Model::Build::ImportedReferenceSequence->get_by_name('NCBI-human-build36');
is($reference->id,101947881, 'Found correct reference sequence');

my $detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => $detector_directory,
    detector_name => 'Genome::Model::Tools::DetectVariants2::Polymutt',
    detector_params => '',
    detector_version => 'awesome',
    reference_build_id => $reference->id,
);
$detector_result->lookup_hash($detector_result->calculate_lookup_hash());

my $i = 0;
for my $result (@test_alignment_results) {
    $detector_result->add_input(
        name => "alignment_results-$i",
        value_id => $result->id,
        value_class_name => $result->class
    );
    ++$i;
}

my $result_allocation = Genome::Disk::Allocation->create(
    disk_group_name => Genome::Config::get('disk_group_models'),
    kilobytes_requested => 1,
    allocation_path => 'this_is_a_test',
    owner_id => $detector_result->id,
    owner_class_name => $detector_result->class,
);

# TODO For right now we are making DV2 results with (only) vcfs in them, but no vcf results
=cut
my $detector_vcf_result = Genome::Model::Tools::DetectVariants2::Result::Vcf::Detector->__define__(
    input => $detector_result,
    output_dir => $detector_vcf_directory,
    aligned_reads_sample => "TEST",
    control_aligned_reads_sample => "TEST-normal",
    vcf_version => $vcf_version,
);
$detector_vcf_result->lookup_hash($detector_vcf_result->calculate_lookup_hash());
$detector_result->add_user(user => $detector_vcf_result, label => 'uses');
=cut

my $filter_command = Genome::Model::Tools::DetectVariants2::Filter::PolymuttDenovo->create(
    previous_result_id => $detector_result->id,
    output_directory => $output_dir,
    pedigree_file_path => "$detector_directory/DS10239.ped",
    bam_readcount_version => 0.6,
    result_users => Genome::Test::Factory::SoftwareResult::User->setup_user_hash(),
);
$filter_command->dump_status_messages(1);
isa_ok($filter_command, 'Genome::Model::Tools::DetectVariants2::Filter::PolymuttDenovo', 'created filter command');

SKIP: {
skip "test BAM not available", 2;
ok($filter_command->execute(), 'executed filter command');

$DB::single=1;
ok(-s $output_vcf, "vcf output exists and has size");

#my $expected_text = `zcat $expected_vcf_file | grep -v '^##fileDate'`;
#my $test_text = `zcat $output_vcf | grep -v '^##fileDate'`;
#my $output_diff = Genome::Sys->diff_text_vs_text($expected_text, $test_text);
#ok(!$output_diff, 'output file matches expected result')
#    or diag("diff:\n" . $output_diff);
}
